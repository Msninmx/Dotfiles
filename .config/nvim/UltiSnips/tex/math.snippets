global !p
def math():
  return vim.eval('vimtex#syntax#in_mathzone()') == '1'
endglobal

# Fractions, roots, and binoms
context "math()"
snippet // "Empty Fraction" iA
\\frac{$1}{$2}$0
endsnippet

snippet / "Convert to Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Filled Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "Fraction with parenthesis" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

context "math()"
snippet "([^a-zA-Z\\])sq" "\sqrt (square root)" rA
`!p snip.rv = match.group(1)`\sqrt{${1:${VISUAL:}}}$0
endsnippet

context "math()"
snippet "([^a-zA-Z\\])nsq" "nth root" rA
`!p snip.rv = match.group(1)`\sqrt[$1]{$2}$0
endsnippet

context "math()"
snippet "([^a-zA-Z\\])bnm" "\binom" rA
`!p snip.rv = match.group(1)`\binom{$1}{$2}$0
endsnippet

# Subscripts and Superscripts
context "math()"
snippet '([A-Za-z])(\d)' "Single digit subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "Double digit subscript" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet "([\w]|[\}\)\]\|'])sd" "Text subscript" rA
`!p snip.rv = match.group(1)`_{\mathrm{${1:${VISUAL:}}}}$0
endsnippet
context "math()"

snippet sr "Squared" iA
^2
endsnippet

context "math()"
snippet cb "Cubed" iA
^3
endsnippet

context "math()"
snippet compl "Complement" iA
^{c}
endsnippet

context "math()"
snippet "([^a-zA-Z])ee" "e^{} supercript" rA
`!p snip.rv = match.group(1)`e^{${1:${VISUAL:}}}$0
endsnippet

snippet td "Empty superscript" iA
^{$1}$0
endsnippet

snippet sb "Empty subscript" iA
_{$1}$0
endsnippet

# Opening and closing delimiters
context "math()"
snippet lpr "left( right)" iA
\left( ${1:${VISUAL}} \right) $0
endsnippet

context "math()"
snippet lbr "left[ right]" iA
\left[ ${1:${VISUAL}} \right] $0
endsnippet

context "math()"
snippet lcr "left{ right}" iA
\left{ ${1:${VISUAL}} \right} $0
endsnippet

context "math()"
snippet <> "left< right>" iA
\left\langle ${1:${VISUAL}} \right\rangle $0
endsnippet

# Symbols
snippet ooo "\infty" iA
\infty
endsnippet

snippet <= "leq" iA
\le
endsnippet

snippet >= "geq" iA
\ge
endsnippet

snippet dots "Dots" iA
\dots
endsnippet

context "math()"
snippet xx "cross" iA
\times 
endsnippet

priority 100
snippet cdot "cdot" iA
\cdot 
endsnippet

context "math()"
snippet ast "* ast" iA
\ast
endsnippet

context "math()"
snippet pm "\pm" iA
\pm
endsnippet

context "math()"
snippet iv "i hat" iA
\hat{\imath}
endsnippet

context "math()"
snippet jv "j hat" iA
\hat{\jmath}
endsnippet

snippet neq "\neq" iA
\neq
endsnippet

context "math()"
snippet dd "Derivative d" iA
\mathrm{d}
endsnippet

context "math()"
snippet pdd "Partial derivative" iA
\partial
endsnippet

# X and Y
context "math()"
snippet xnn "xn" iA
x_{n}
endsnippet

context "math()"
snippet ynn "yn" iA
y_{n}
endsnippet

context "math()"
snippet xii "xi" iA
x_{i}
endsnippet

context "math()"
snippet yii "yi" iA
y_{i}
endsnippet

context "math()"
snippet xjj "xj" iA
x_{j}
endsnippet

context "math()"
snippet yjj "yj" iA
y_{j}
endsnippet

context "math()"
snippet 1xp "x" iA
x_{n+1}
endsnippet

context "math()"
snippet xmm "x" iA
x_{m}
endsnippet

# Integrals
snippet "([^\w\\])intt" "Integral with upper and lower limit" rA
`!p snip.rv = match.group(1)`\int_{$1}^{$2} $0
endsnippet

snippet "([^\w\\])innt" "Integral with symmetric upper and lower limit" rA
`!p snip.rv = match.group(1)`\int_{-$1}^{$1} $0
endsnippet

snippet "([^\w\\])iiint" "\iiint" rA
`!p snip.rv = match.group(1)`\iiint
endsnippet

snippet "([^\w\\])iint" "\iint" rA
`!p snip.rv = match.group(1)`\iint
endsnippet

snippet "([^\w\\])oint" "\oint" rA
`!p snip.rv = match.group(1)`\oint_C
endsnippet

# Sums
context "math()"
snippet "([^\w\\])sM" "Sum with only lower limit" rA
`!p snip.rv = match.group(1)`\sum_{$1}$0
endsnippet

context "math()"
snippet "([^\w\\])prod" "Product with only lower limit" rA
`!p snip.rv = match.group(1)`\prod_{$1}$0
endsnippet

context "math()"
snippet "([^\w\\])smm" "Sum with upper and lower limit" rA
`!p snip.rv = match.group(1)`\sum_{$1}^{$2}$0
endsnippet

snippet "([^\w\\])smf" "Sum from negative to positive infinity" rA
`!p snip.rv = match.group(1)`\sum_{$1-\infty}^{\infty} $0
endsnippet

context "math()"
snippet "([^\w\\])lsM" "Inline math sum with only lower limit" rA
`!p snip.rv = match.group(1)`\sum \limits_{$1}$0
endsnippet

context "math()"
snippet "([^\w\\])lsmm" "Inline math sum with upper and lower limit" rA
`!p snip.rv = match.group(1)`\sum \limits_{$1}^{$2}$0
endsnippet

# Limits
context "math()"
snippet "([^\w\\])lM" "\limits{} with only lower limit" rA
`!p snip.rv = match.group(1)`\limits_{$1}$0
endsnippet

context "math()"
snippet "([^\w\\])lmm" "\limits{}{} with upper and lower limit" rA
`!p snip.rv = match.group(1)`\limits_{$1}{$2}$0
endsnippet

# Text functions
context "math()"
snippet sin "\sin" iA
\sin
endsnippet

context "math()"
snippet cos "\cos" iA
\cos
endsnippet

context "math()"
snippet tan "\tan" iA
\tan
endsnippet

context "math()"
snippet log "\log" iA
\log
endsnippet

context "math()"
snippet ln "\ln" iA
\ln
endsnippet

context "math()"
snippet exp "\exp" iA
\exp
endsnippet

# Derivatives
context "math()"
snippet edv "Empty Derivative" iA
\frac{\mathrm{d}}{$1}$0
endsnippet

context "math()"
snippet Dv "Derivative" iA
\frac{\mathrm{d}$1}{$2}$0
endsnippet

context "math()"
snippet epdv "Empty Partial Derivative" iA
\frac{\partial}{\partial $1}$0
endsnippet

context "math()"
snippet Pdv "Partial Derivative" iA
\frac{\partial $1}{\partial $2}$0
endsnippet

# Units
snippet qty "SI Unit Indicator" iA
\qty{$1}{\\$2}$0
endsnippet

